#!/usr/bin/env python3
##
## EPITECH PROJECT, 2020
## 108
## File description:
## trigo
##

from sys import *
import math
import time

def binomialCoeff(n, k):
    try:
        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))
    except ValueError:
        return 0

def binomialLaw(n, k, p):
    coef_binomial = binomialCoeff(n, k)
    return coef_binomial * (p ** k) * ((1 - p) ** (n - k))

def pascal(m):
    for x in range(m + 1):
        print([binomialCoeff(x, y) for y in range(x + 1)])

def calc_twoArgs(arg1, arg2):
    print(arg2, "-combinations of a set of size ", arg1, ":", sep='')
    print(binomialCoeff(arg1, arg2))

def poisson(d):
    before = time.time()
    overload = 0
    n = 3500
    p = d / 28800
    c = p * n
    print("Poisson distribution:")
    for i in range(0, 51):
        res = math.exp(-c) * c ** i / math.factorial(i)
        if i > 25:
            overload += res
        print(i, " -> ", "%.3f" % res, "\n" if (int(repr(i)[-1]) == 4 or int(repr(i)[-1]) == 9) else "\t" if i != 50 else "", sep='', end='')
    # time.sleep(2)
    after = time.time()
    print("\nOverload: ", "%.1f" % float(overload * 100), "%", "\nComputation time: ", "%.2f" % (float(after - before) * 1000), " ms", sep='')

def calc_oneArg(arg1):
    before = time.time()
    overload = 0
    p = arg1 / (8 * 60 * 60)
    print("Binomial distribution:")
    for i in range(0, 51):
        res = binomialLaw(3500, i, p)
        if i > 25:
            overload += res
        print(i, " -> ", "%.3f" % res, "\n" if (int(repr(i)[-1]) == 4 or int(repr(i)[-1]) == 9) else  "\t" if i != 50 else "", sep='', end='')
    print("\nOverload: ", "%.1f" % float(overload * 100), "%", sep='')
    after = time.time()
    print("Computation time:", "%.2f" % (float(after - before) * 1000), "ms\n")
    poisson(arg1)

def try_args():
    if len(argv) == 2:
        try:
            int(argv[1])
        except ValueError:
            print("Invalid Argument: Syntax error in argument")
            exit(84)
        if int(argv[1]) < 0:
            print("Invalid Argument: d is negative")
            exit(84)

    if len(argv) == 3:
        try:
            int(argv[1])
            int(argv[2])
        except ValueError:
            print("Invalid Argument: Syntax error in argument")
            exit(84)
        if int(argv[1]) < 0:
            print("Invalid Argument: n is negative")
            exit(84)

def guide():
    print("USAGE")
    print("\t./203hotline [n k | d]")
    print("\nDESCRIPTION\n")
    print("\tn\tn value for the computation of C(n, k)")
    print("\tk\tkvalue for the computation of C(n, k)")
    print("\td\t average duration of calls (in seconds)")

def main():
    if len(argv) == 2 and argv[1] == '-h':
        guide()
        exit(0)
    if len(argv) != 3 and len(argv) != 2:
        print("Wrong amount of arguments.")
        exit(84)
    try_args()
    if len(argv) == 2:
        calc_oneArg(int(argv[1]))
    if len(argv) == 3:
        calc_twoArgs(int(argv[1]), int(argv[2]))
    exit(0)

if __name__ == "__main__":
    main()