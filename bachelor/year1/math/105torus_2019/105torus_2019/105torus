#!/usr/bin/env python3
##
## EPITECH PROJECT, 2020
## math
## File description:
## 105torus
##


from math import *
import sys

def is_integer(n):
    try:
        float(n)
    except ValueError:
        return False
    else:
        return float(n).is_integer()

def f(x):
    a0 = int(sys.argv[2])
    a1 = int(sys.argv[3])
    a2 = int(sys.argv[4])
    a3 = int(sys.argv[5])
    a4 = int(sys.argv[6])
    a0 = int(sys.argv[2])
    return x**4*a4 + x**3*a3 + x**2*a2 + x*a1 + a0

def f_prime(x):
    a0 = int(sys.argv[2])
    a1 = int(sys.argv[3])
    a2 = int(sys.argv[4])
    a3 = int(sys.argv[5])
    a4 = int(sys.argv[6])
    return 4*x**3*a4 + 3*x**2*a3 + 2*x*a2 + a1

def bissection_method(n):
    x = 0
    y = 1
    z = 0
    while (y - x) > (10**-n):
        result1 = f(x)
        z = (x + y) / 2
        result2 = f(z)
        if (result1 * result2 < 0):
            y = z
            if ("{0:.{1}g}".format(z, n) == "{0:.{1}g}".format(z, n + 5)):
                print("x = {0:.{1}g}".format(z, n))
            else:
                print("x = {0:.{1}f}".format(z, n))
        else:
            x = z
            if ("{0:.{1}g}".format(z, n) == "{0:.{1}g}".format(z, n + 5)):
                print("x = {0:.{1}g}".format(z, n))
            else:
                print("x = {0:.{1}f}".format(z, n))

def newton_method(n):
    x = 0
    b = 1
    xn = 0.5
    print("x = 0.5")
    for loop in range(100):
        result1 = f(xn)
        result2 = f_prime(xn)
        if (result2 == 0):
            sys.exit(1)
        xm = xn - (result1 / result2)
        if (xm == 0):
            sys.exit(2)
        if (abs((xm - xn)) / abs((xm)) < 10**-n):
            sys.exit(0)
        else:
            if ("{0:.{1}g}".format(xm, n) == "{0:.{1}g}".format(xm, n + 5)):
                print("x = {0:.{1}g}".format(xm, n))
            else:
                print("x = {0:.{1}f}".format(xm, n))
            xn = xm
    sys.exit(0)

def secant_method(n):
    x0 = 0
    x1 = 1
    while (f(x1) - f(x0) != 0):
        Xm = x1 - (f(x1) * (x1 - x0)) / (f(x1) - f(x0))
        if ("{0:.{1}g}".format(Xm, n) == "{0:.{1}g}".format(Xm, n + 5)):
            print("x = {0:.{1}g}".format(round(Xm, n), n))
        else:
            print("x = {0:.{1}f}".format(round(Xm, n), n))
        if (abs(Xm - x1) / abs(Xm) < pow(10, -n)):
            exit(0)
        x0 = x1
        x1 = Xm
    exit(0)

def helper():
    print("USAGE\n\t./105torus opt a0 a1 a2 a3 a4 n\n")
    print("DESCRIPTION")
    print("\topt         method option:")
    print("\t            \t1 for the bisection method")
    print("\t            \t2 for Newton's method")
    print("\t            \t3 for the scant method")
    print("\ta[0-4]      coefficients of the equation")
    print("\tn           precision (the application of the polynomial to the solution should")
    print("\t            be smaller than 10^-n")

def main():
    if len(sys.argv) < 2:
        sys.exit(84)
    if sys.argv[1] == '-h':
        helper()
    if len(sys.argv) != 8 :
        sys.exit(84)
    i = 1
    while i < 8:
        if (is_integer(sys.argv[i]) == False):
            print ("invalid type of argument")
            sys.exit(84)
        i += 1
    n = int(sys.argv[7])
    if n < 0:
        exit(84)
    if sys.argv[1] != '1' and sys.argv[1] != '2' and sys.argv[1] != '3':
        sys.exit(84)
    if sys.argv[1] == '3' and sys.argv[2] == '0':
        sys.exit(84)
    if ((int(sys.argv[7]) < 1) and (int(sys.argv[7]) > 2147483642)):
        sys.exit(84)
    if sys.argv[1] == '1':
        bissection_method(n)
    if sys.argv[1] == '2':
        newton_method(n)
    if sys.argv[1] == '3':
        secant_method(n)
if __name__ == '__main__':
    main()
