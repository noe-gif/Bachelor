#!/usr/bin/env python3
##
## EPITECH PROJECT, 2019
## 104
## File description:
## math
##

import sys
import math
from math import *

def sphere_calcul(xp, yp, zp, xv, yv, zv, r):
    x = 0
    y = 0
    z = 0
    a = math.pow(xv,2) + math.pow(yv,2) + math.pow(zv,2)
    b = 2 * xp * xv + 2 * yp * yv + 2 * zp * zv
    c = math.pow(xp,2) + math.pow(yp,2) + math.pow(zp,2) - math.pow(r,2)
    delta = math.pow(b,2) - 4 * a * c
    if a == 0:
        sys.exit(84)
    lamda = -b/(2 * a)
    if delta < 0:
        print("No intersection point.")
    if delta == 0:
        print("1 intersection point:")
        xx = xp + lamda * xv
        yy = yp + lamda * yv
        zz = zp + lamda * zv
        print ("(%.3f" % xx, ", %.3f" % yy, ", %.3f" % zz, ")", sep="")
    if delta > 0:
        print("2 intersection points:")
        lamda_one = ((-b - math.sqrt(delta))/(2 * a))
        lamda_two = ((-b + math.sqrt(delta))/(2 * a))
        print("(%.3f" % (xp + lamda_two * xv), ", %.3f" %
              (yp + lamda_two *yv), ", %.3f" % (zp + lamda_two * zv), ")", sep="")
        print("(%.3f" % (xp + lamda_one * xv), ", %.3f" %
              (yp + lamda_one *yv), ", %.3f" % (zp + lamda_one * zv), ")", sep="")

def cylinder_calcul(xp, yp, zp, xv, yv, zv, r):
    x = 0
    y = 0
    z = 0
    a = math.pow(xv,2) + math.pow(yv,2)
    b = 2 * xp * xv + 2 * yp * yv
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(r,2)
    delta = math.pow(b,2) - 4 * a * c
    if (a == 0) and (c == 0):
        print("There is an infinite number of intersection points.")
        sys.exit(0)
    lamda = -b/(2 * a)
    if delta < 0:
        print("No intersection point.")
    if delta == 0:
        print("1 intersection point:")
        xx = xp + lamda * xv
        yy = yp + lamda * yv
        zz = zp + lamda * zv
        print ("(%.3f" % xx, ", %.3f" % yy, ", %.3f" % zz, ")", sep="")
    if delta > 0:
        print("2 intersection points:")
        lamda_one = ((-b - math.sqrt(delta))/(2 * a))
        lamda_two = ((-b + math.sqrt(delta))/(2 * a))
        xx_one = xp - lamda_one * xv
        yy_one = yp - lamda_one * yv
        zz_one = zp - lamda_one * zv
        xx_two = xp - lamda_two * xv
        yy_two = yp - lamda_two * yv
        zz_two = zp - lamda_two * zv
        if lamda_one > lamda_two :
            print("(%.3f" % xx_two, ", %.3f" % yy_two, ", %.3f" % zz_two, ")", sep="")
            print("(%.3f" % xx_one, ", %.3f" % yy_one, ", %.3f" % zz_one, ")", sep="")
        else :
            print("(%.3f" % xx_one, ", %.3f" % yy_one, ", %.3f" % zz_one, ")", sep="")
            print("(%.3f" % xx_two, ", %.3f" % yy_two, ", %.3f" % zz_two, ")", sep="")

def cone_calcul(xp, yp, zp, xv, yv, zv, r):
    x = 0
    y = 0
    z = 0
    r = math.radians(r)
    a = math.pow(xv,2) + math.pow(yv,2) - math.pow((zv * math.tan(r)), 2)
    b = 2 * xp * xv + 2 * yp * yv - 2 * zp * zv * math.pow(math.tan(r), 2)
    c = math.pow(xp,2) + math.pow(yp,2) - math.pow(zp,2) * math.pow(math.tan(r),2)
    delta = math.pow(b,2) - 4 * a * c
    lamda = -c/b    
    if (b == 0) and (c == 0):
        print("There is an infinite number of intersection points.")
        sys.exit(0)
    if delta < 0:
        print("No intersection point.")
    if delta == 0:
        print("1 intersection point:")
        xx = xp + lamda * xv
        yy = yp + lamda * yv
        zz = zp + lamda * zv
        print ("(%.3f" % xx, ", %.3f" % yy, ", %.3f" % zz, ")", sep="")
    if delta > 0:
        print("2 intersection points:")
        lamda_one = ((-b - math.sqrt(delta))/(2 * a))
        lamda_two = ((-b + math.sqrt(delta))/(2 * a))
        xx_one = xp + lamda_one * xv
        yy_one = yp + lamda_one * yv
        zz_one = zp + lamda_one * zv
        xx_two = xp + lamda_two * xv
        yy_two = yp + lamda_two * yv
        zz_two = zp + lamda_two * zv
        if lamda_one > lamda_two :
            print("(%.3f" % xx_two, ", %.3f" % yy_two, ", %.3f" % zz_two, ")", sep="")
            print("(%.3f" % xx_one, ", %.3f" % yy_one, ", %.3f" % zz_one, ")", sep="")
        else :
            print("(%.3f" % xx_one, ", %.3f" % yy_one, ", %.3f" % zz_one, ")", sep="")
            print("(%.3f" % xx_two, ", %.3f" % yy_two, ", %.3f" % zz_two, ")", sep="")

def line():
    print ("Line passing through the point (", sys.argv[2], ', ' ,sys.argv[3], ', ' ,sys.argv[4], ") and parallel to the vector (", sys.argv[5], ', ', sys.argv[6], ', ',sys.argv[7], ')', sep="")

def is_integer(n):
    try:
        float(n)
    except ValueError:
        return False
    else:
        return float(n).is_integer()

def error():
    if (len(sys.argv) < 9):
        print ("invalid number of arguments")
        sys.exit(84)
    if sys.argv[1] == '-h':
        print('''USAGE                                                                                               
        ./104intersection opt xp yp zp xv yv zv p
        
        DESCRIPTION                                                                      

        opt             surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone                               
        (xp, yp, zp)    coordinates of a point by which the light ray passes through                                 
        (xv, yv, zv)    coordinates of a vector parallel to the light ray                                            
        p               parameter: radius of the sphere, radius of the cylinder, or                                  
                        angle formed by the cone and the Z-axis''')
        sys.exit(0)
    if (len(sys.argv) > 9):
        print ("too much arguments")
        sys.exit(84)
    i = 1
    while i < 9:
        if (is_integer(sys.argv[i]) == False):
            print ("invalid type of argument")
            sys.exit(84)
        i += 1
    if ((sys.argv[1] != '1') and (sys.argv[1] != '2') and (sys.argv[1] != '3')):
        sys.exit(84)
    if (sys.argv[5] == '0' and sys.argv[6] == '0' and sys.argv[7] == '0'):
        sys.exit(84)
    if sys.argv[1] == '1':
        if int(sys.argv[8]) < 1:
            sys.exit(84)
    if sys.argv[1] == '2':
        if int(sys.argv[8]) < 1:
            sys.exit(84)
    if sys.argv[1] == '3':
        if (sys.argv[2] == '0' and sys.argv[6] == '0' and sys.argv[7] == '0'):
            sys.exit(84)
        if (sys.argv[2] == '0' and sys.argv[3] == '0' and sys.argv[7] == '0'):
            sys.exit(84)
        if (sys.argv[5] == '0' and sys.argv[6] == '0'):
            sys.exit(84)
        if int(sys.argv[8]) < 1:
            sys.exit(84)
        if int(sys.argv[8]) >= 181:
            sys.exit(84)
        if int(sys.argv[8]) < 0:
            sys.exit(84)

def main():
    error()
    if sys.argv[1] == '1':
        print ("Sphere of radius", sys.argv[8])
        line()
        sphere_calcul(float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4]), float(sys.argv[5]), float(sys.argv[6]), float(sys.argv[7]), float(sys.argv[8]))
    if sys.argv[1] == '2':
        print ("Cylinder of radius", sys.argv[8])
        line()
        cylinder_calcul(float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4]), float(sys.argv[5]), float(sys.argv[6]), float(sys.argv[7]), float(sys.argv[8]))
    if sys.argv[1] == '3':
        print ("Cone with a", sys.argv[8], "degree angle")
        line()
        cone_calcul(float(sys.argv[2]), float(sys.argv[3]), float(sys.argv[4]), float(sys.argv[5]), float(sys.argv[6]), float(sys.argv[7]), float(sys.argv[8]))
if __name__ == '__main__':
    main()
